#include <iostream>
#include <list>
#include <functional>
#include <stdlib.h>
#include <cstring>
#include <pthread.h>

int user_main(int argc, char **argv);

typedef struct
{
  int low;
  int high;
  std::function<void(int)> lambda;

} vec; // Structure to hold the range and lambda function for each thread

void *thread_func1(void *arg)
{
  vec *vec1 = static_cast<vec *>(arg);
  if(vec1 == NULL)
  {
    perror( "Error! Failed to cast argument to vec*\n");
    pthread_exit(NULL);
  }
  for (int i = vec1->low; i < vec1->high; ++i) // Execute the lambda function for each value in the range
  {
    vec1->lambda(i);
    
  }

  pthread_exit(NULL);
}
void parallel_for(int low, int high, std::function<void(int)> &&lambda, int numThreads)
{
  if(numThreads <= 0)
  {
    perror("Error! Number of threads must be greater than 0\n");
    return;
  }
  pthread_t thread_list[numThreads]; 
  vec args[numThreads]; // Array of vec structures to hold the range and lambda function for each thread
  int chunk = (high - low) / numThreads; 
  clock_t start_time = clock(); 

  for (int i = 0; i < numThreads; ++i)
  {
    args[i].low = i * chunk; // Calculating the lower bound for the thread
    args[i].high = (i == numThreads - 1) ? high : (i + 1) * chunk; // Calculate the upper bound for the thread
    args[i].lambda = lambda; //Lambda function to be executed by the thread for each value in the range
    if(pthread_create(&thread_list[i], NULL, thread_func1, (void *)&args[i]) != 0) // Create the thread and check for errors
    {
      perror("Error! Failed to create thread\n");
      return;
    }
  }
  for (int i = 0; i < numThreads; ++i){
    if(pthread_join(thread_list[i], NULL) != 0)
    {
      perror("Error! Failed to join thread\n");
      return;
    }
  }
  clock_t end_time = clock(); // Stop the timer
  double duration = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0; // Duration in milliseconds of the parallel for loop execution for the given number of threads
  printf("Total time taken: %f milliseconds\n", duration); 
}

typedef struct
{
  int low1;
  int high1;
  int low2;
  int high2;
  std::function<void(int, int)> lambda;
} mat;

void *thread_func2(void *ptr)
{
  mat *mat1 = (mat *)ptr;
  if(mat1 == NULL)
  {
    perror("Error! Failed to cast argument to mat*\n");
    pthread_exit(NULL);
  }
  for (int i = mat1->low1; i < mat1->high1; ++i)
  {
    for (int j = mat1->low2; j < mat1->high2; ++j) //
    {
      mat1->lambda(i, j);
    }
  }

  pthread_exit(NULL);
}
void parallel_for(int low1, int high1, int low2, int high2,
                  std::function<void(int, int)> &&lambda, int numThreads)
{
  if(numThreads <= 0)
  {
    perror("Error! Number of threads must be greater than 0\n");
    return;
  }
  pthread_t thread_list[numThreads];
  mat args[numThreads];
  int chunk1 = (high1 - low1) / numThreads;
  int chunk2 = (high2 - low2) / numThreads;
  clock_t start_time = clock();

  for (int i = 0; i < numThreads; ++i)
  {
    args[i].low1 = i * chunk1;
    args[i].high1 = (i == numThreads - 1) ? high1 : (i + 1) * chunk1;
    args[i].low2 = low2;
    args[i].high2 = high2;
    args[i].lambda = lambda;
    if(pthread_create(&thread_list[i], NULL, thread_func2, (void *)&args[i]) != 0)
    {
      perror("Error! Failed to create thread\n");
      return;
    }
  }
  for (int i = 0; i < numThreads; ++i)
  {
    if(pthread_join(thread_list[i], NULL) != 0)
    {
      perror("Error! Failed to join thread\n");
      return;
    }
  }
  clock_t end_time = clock();
  double duration = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
  printf("Total time taken: %f milliseconds\n", duration);
  //Each paralled_for is create its own set of theads. Three time printed for mat multiplication, it is because the first time is for mat initialization, second is for mat multiplication and third is for mat verification. Each printing their own time after their threads complete.
}
void demonstration(std::function<void()> &&lambda)
{
  if(!lambda)
  {
    std::cerr << "Error! Lambda function is null\n";
    return;
  }
  lambda();
}

int main(int argc, char **argv)
{
  int x = 5, y = 1;

  auto lambda1 = [x, &y](void)
  {
    y = 5;
    std::cout << "====== Welcome to Assignment-" << y << " of the CSE231(A) ======\n";
  };
  demonstration(lambda1);

  int rc = user_main(argc, argv);

  auto lambda2 = []()
  {
    std::cout << "====== Hope you enjoyed CSE231(A) ======\n";
  };
  demonstration(lambda2); 
  return rc; 
}

#define main user_main
