#include <iostream>
#include <list>
#include <functional>
#include <stdlib.h>
#include <cstring>
#include <pthread.h>


int user_main(int argc, char **argv);

typedef struct  {
    int low;
    int high;
    std::function<void(int)> lambda;
    
} vec;

void* thread_func1(void* arg) {
    vec* vec1 = static_cast<vec*>(arg);

    // Execute the lambda function in the specified range
    for (int i = vec1->low; i < vec1->high; ++i) {
        vec1->lambda(i);
    }

    pthread_exit(NULL);
}
// parallel_for accepts a C++11 lambda function and runs the loop body (lambda) in
// parallel by using ‘numThreads’ number of Pthreads to be created by the simple-multithreader
void parallel_for(int low, int high, std::function<void(int)> &&lambda, int numThreads){
  pthread_t thread_list[numThreads];
  vec args[numThreads];
  int chunk = (high - low) / numThreads;
  clock_t start_time = clock();

  for (int i = 0; i < numThreads; ++i) {
        args[i].low = i * chunk;
        args[i].high = (i == numThreads - 1) ? high : (i + 1) * chunk;
        args[i].lambda = lambda;

        pthread_create(&thread_list[i], NULL,thread_func1,(void*) &args[i]);
    }

    // Wait for all threads to finish
    for (int i = 0; i < numThreads; ++i) {
        pthread_join(thread_list[i], NULL);
    }
    clock_t end_time = clock();
    double duration = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
    printf("Total time taken: %f milliseconds\n", duration);

}

typedef struct{
int low1;
int high1; 
int low2; 
int high2;
std::function<void(int, int)> lambda;
}mat;

void * thread_func2(void* ptr){
  mat* mat1 = (mat*)ptr;

    
    for (int i = mat1 ->low1; i < mat1 ->high1; ++i) {
        for (int j = mat1 ->low2; j < mat1 ->high2; ++j) {
            mat1 ->lambda(i, j);
        }
    }

    pthread_exit(NULL);
}
// This version of parallel_for is for parallelizing two-dimensional for-loops, i.e., an outter for-i loop and
// an inner for-j loop. Loop properties, i.e. low, high are mentioned below for both outter
// and inner for-loops. The suffixes “1” and “2” represents outter and inner loop properties respectively.
void parallel_for(int low1, int high1, int low2, int high2,
std::function<void(int, int)> &&lambda, int numThreads){      
  pthread_t thread_list[numThreads];
  mat args[numThreads];
  int chunk1 =(high1 - low1) / numThreads;
    int chunk2 = (high2 - low2) / numThreads;
  clock_t start_time = clock();

    for (int i = 0; i < numThreads; ++i) {
        args[i].low1 = i * chunk1;
        args[i].high1 = (i == numThreads - 1) ? high1 : (i + 1) * chunk1;
        args[i].low2 = low2;
        args[i].high2 = high2;
        args[i].lambda = lambda;

        pthread_create(&thread_list[i], NULL, thread_func2, (void*)&args[i]);
    }

    // Wait for all threads to finish
    for (int i = 0; i < numThreads; ++i) {
        pthread_join(thread_list[i], NULL);
    }
    clock_t end_time = clock();
    double duration = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
    printf("Total time taken: %f milliseconds\n", duration);
}


/* Demonstration on how to pass lambda as parameter.
 * "&&" means r-value reference. You may read about it online.
 */
void demonstration(std::function<void()> && lambda) {
  lambda();
}

int main(int argc, char **argv) {
  /* 
   * Declaration of a sample C++ lambda function
   * that captures variable 'x' by value and 'y'
   * by reference. Global variables are by default
   * captured by reference and are not to be supplied
   * in the capture list. Only local variables must be 
   * explicity captured if they are used inside lambda.
   */
  int x=5,y=1;
  // Declaring a lambda expression that accepts void type parameter

  auto /*name*/ lambda1 = /*capture list*/[/*by value*/ x, /*by reference*/ &y](void) {
    /* Any changes to 'x' will throw compilation error as x is captured by value */
    y = 5;
    std::cout<<"====== Welcome to Assignment-"<<y<<" of the CSE231(A) ======\n";
    /* you can have any number of statements inside this lambda body */
  };
  // Executing the lambda function
  demonstration(lambda1); // the value of x is still 5, but the value of y is now 5

  int rc = user_main(argc, argv);
 
  auto /*name*/ lambda2 = [/*nothing captured*/]() {
    std::cout<<"====== Hope you enjoyed CSE231(A) ======\n";
    /* you can have any number of statements inside this lambda body */
    
  };
  demonstration(lambda2);
  return rc;
}

#define main user_main


